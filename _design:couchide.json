{
  "version": "0.5",
 "comment": "This is the CouchIDE design doc, when placed in a database it creates a sort of webserver for you.\nDocumentation at: https://github.com/vhv/CouchIDE",
 "_id": "_design/couchide",
 "views": {
 "type-doc": {
 "map": "function(doc) { emit(doc.type, doc) }"
 }
 },
 "rewrites": [
   {
     "from": "/couchide/",
     "to": "couch.ide"
   },
   {
     "from": "/couchide/*",
     "to": "couch.ide"
   },
   {
     "from": "/",
     "to": "_show/render/index.html"
   },
   {
     "from": "*/type-doc",
     "to": "_view/type-doc"
   },
   {
     "from": "/_session/",
     "to": "../../../_session/"
   },
   {
     "from": "/db/",
     "to": "../../"
   },
   {
     "from": "/db/*",
     "to": "../../*"
   },
   {
     "from": "/api/*",
     "to": "../../../*"
   },
   {
     "from": "/lib/*",
     "to": "../../../libraries/*"
   },
   {
     "from": "/*",
     "to": "_show/render/*"
   }
 ],
 "shows": {
   "render": "function(doc, req) { return { \"headers\": { \"Content-Type\": doc.type }, \"body\": doc.body } }"
  },
  "_attachments": {
    "couch.ide": {
      "content_type": "text/html",
      "data": ""
    }
  }
}
